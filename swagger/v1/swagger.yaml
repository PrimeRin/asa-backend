---
openapi: 3.0.1
info:
  title: ASA Backend API
  version: v1
paths:
  "/api/advances":
    get:
      summary: Retrieves all advances
      tags:
      - Advances
      parameters:
      - name: advance
        in: query
        schema:
          type: object
          properties:
            status:
              type: array
              items:
                type: string
            advance_type:
              type: array
              items:
                type: string
            type:
              type: string
          required:
          - status
          - advance_type
      responses:
        '200':
          description: advances found
          content:
            application/json:
              schema:
                type: array
                items:
                  type: object
                  properties:
                    id:
                      type: integer
                    advance_type:
                      type: string
                    status:
                      type: string
                    amount:
                      type: number
                    verified_by:
                      type: integer
                      nullable: true
                    confirmed_by:
                      type: integer
                      nullable: true
                    dispatch_by:
                      type: integer
                      nullable: true
                    user_id:
                      type: integer
                    created_at:
                      type: string
                      format: date_time
                    updated_at:
                      type: string
                      format: date_time
                  required:
                  - id
                  - advance_type
                  - status
                  - amount
                  - user_id
                  - created_at
                  - updated_at
        '404':
          description: advances not found
    post:
      summary: Creates an advance
      tags:
      - Advances
      parameters: []
      responses:
        '201':
          description: advance created
        '422':
          description: invalid request
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                advance_type:
                  type: string
                status:
                  type: string
                amount:
                  type: number
              required:
              - advance_type
              - status
              - amount
  "/api/advances/{id}":
    get:
      summary: Retrieves an advance
      tags:
      - Advances
      parameters:
      - name: id
        in: path
        required: true
        schema:
          type: integer
      responses:
        '200':
          description: advance found
          content:
            application/json:
              schema:
                type: object
                properties:
                  id:
                    type: integer
                  advance_type:
                    type: string
                  status:
                    type: string
                  amount:
                    type: number
                  verified_by:
                    type: integer
                    nullable: true
                  confirmed_by:
                    type: integer
                    nullable: true
                  dispatch_by:
                    type: integer
                    nullable: true
                  user_id:
                    type: integer
                  created_at:
                    type: string
                    format: date_time
                  updated_at:
                    type: string
                    format: date_time
                required:
                - id
                - advance_type
                - status
                - amount
                - user_id
                - created_at
                - updated_at
        '404':
          description: advance not found
  users/sign_in:
    post:
      summary: Sign in user
      tags:
      - Authentication
      parameters: []
      responses:
        '200':
          description: user signed in
        '401':
          description: unauthorized user
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                login:
                  type: string
                password:
                  type: string
              required:
              - login
              - password
  users/sign_out:
    delete:
      summary: Sign out user
      tags:
      - Authentication
      responses:
        '200':
          description: user signed out
  "/api/rates":
    get:
      summary: Retrieves a specific rate
      tags:
      - Rates
      parameters:
      - name: rate
        in: query
        schema:
          type: object
          properties:
            from:
              type: string
            to:
              type: string
          required:
          - from
          - to
      responses:
        '200':
          description: rate found
          content:
            application/json:
              schema:
                type: object
                properties:
                  id:
                    type: integer
                  from:
                    type: string
                  to:
                    type: string
                  grade_id:
                    type: integer
                  created_at:
                    type: string
                    format: date_time
                  updated_at:
                    type: string
                    format: date_time
                required:
                - id
                - from
                - to
                - grade_id
                - created_at
                - updated_at
        '404':
          description: rate not found
    post:
      summary: Creates a rate
      tags:
      - Rates
      parameters: []
      responses:
        '201':
          description: rate created
        '422':
          description: invalid request
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                from:
                  type: string
                to:
                  type: string
                grade_id:
                  type: string
              required:
              - from
              - to
              - grade_id
  "/api/rates/countries":
    get:
      summary: Retrieves all countries with rates
      tags:
      - Rates
      responses:
        '200':
          description: countries found
          content:
            application/json:
              schema:
                type: array
                items:
                  type: string
  "/api/users":
    get:
      summary: Retrieves all users
      tags:
      - Users
      parameters:
      - name: page
        in: query
        description: Page number
        schema:
          type: integer
      responses:
        '200':
          description: users found
          content:
            application/json:
              schema:
                type: object
                properties:
                  pagy:
                    type: object
                  users:
                    type: array
                    items:
                      "$ref": "#/definitions/User"
    post:
      summary: Creates a user
      tags:
      - Users
      parameters: []
      responses:
        '201':
          description: user created
        '422':
          description: unprocessable entity
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                email:
                  type: string
                password:
                  type: string
                password_confirmation:
                  type: string
                profile_pic:
                  type: string
                grade_id:
                  type: integer
                role_id:
                  type: integer
              required:
              - email
              - password
              - password_confirmation
  "/api/users/{id}":
    get:
      summary: Retrieves a user
      tags:
      - Users
      parameters:
      - name: id
        in: path
        description: ID of the user to retrieve
        required: true
        schema:
          type: integer
      responses:
        '200':
          description: user found
          content:
            application/json:
              schema:
                type: object
                properties:
                  id:
                    type: integer
                  email:
                    type: string
                  profile_pic:
                    type: string
                  grade_id:
                    type: integer
                  role_id:
                    type: integer
                  created_at:
                    type: string
                    format: date_time
                  updated_at:
                    type: string
                    format: date_time
                  role:
                    type: object
                  grade:
                    type: object
        '404':
          description: user not found
    put:
      summary: Updates a user
      tags:
      - Users
      parameters:
      - name: id
        in: path
        description: ID of the user to update
        required: true
        schema:
          type: integer
      responses:
        '200':
          description: user updated
        '422':
          description: unprocessable entity
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                email:
                  type: string
                profile_pic:
                  type: string
                grade_id:
                  type: integer
                role_id:
                  type: integer
              required:
              - email
    delete:
      summary: Deletes a user
      tags:
      - Users
      parameters:
      - name: id
        in: path
        description: ID of the user to delete
        required: true
        schema:
          type: integer
      responses:
        '204':
          description: user deleted
servers:
- url: https://127.0.0.1:3000
  variables:
    defaultHost:
      default: www.example.com
